{"version":3,"sources":["Square.js","Board.js","Game.js","index.js"],"names":["Square","props","classes","isWinner","react_default","a","createElement","className","onClick","onSquareClick","value","Board","i","_this","this","src_Square","key","squares","winnerLine","indexOf","template","children","k","push","renderSquare","React","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","winner","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","lastStep","xIsNext","stepNumber","_this2","slice","calculateWinnerResult","setState","prevState","concat","step","status","_this3","current","moves","map","move","desc","jumpTo","pos","col","row","Math","floor","getColAndRow","src_Board","handleClick","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.f9177263.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {\n  const classes = \"square\" + (props.isWinner ? ' square-win' : '');\n  return (\n    <button\n      className={classes}\n      onClick={props.onSquareClick}\n    >\n      {props.value}\n    </button>\n  )\n}\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onSquareClick={() => this.props.onClick(i)}\n        isWinner = {this.props.winnerLine.indexOf(i) !== -1 ? true : false}\n      />\n    )\n  }\n\n  render() {\n    let template = [];\n    for (let i = 0; i < 8; i += 3) {\n      let children = [];\n      for (let k = i; k < i + 3; k++) {\n        children.push(this.renderSquare(k));\n      }\n      template.push(<div className=\"board-row\" key={i}>{children}</div>);\n    }\n    return (\n      <div>{template}</div>\n    );\n  }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        lastStep: null\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      winnerLine: [],\n      winner: null\n    };\n  }\n  \n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (this.state.winner || squares[i])\n      return;\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    const calculateWinnerResult = calculateWinner(squares);\n    const winnerLine = calculateWinnerResult === null ? [] : calculateWinnerResult.winnerLine;\n    const winner = calculateWinnerResult === null ? null : calculateWinnerResult.winner;\n    this.setState((prevState) => { \n      return {\n        history: history.concat([{ squares: squares, lastStep: i }]),\n        xIsNext: !this.state.xIsNext,\n        stepNumber: history.length,\n        winnerLine: winnerLine,\n        winner: winner\n      }\n    });\n  }\n  \n  jumpTo(step) {\n    const history = this.state.history;\n    const squares = history[step].squares;\n    const calculateWinnerResult = calculateWinner(squares);\n    const winnerLine = calculateWinnerResult === null ? [] : calculateWinnerResult.winnerLine;\n    const winner = calculateWinnerResult === null ? null : calculateWinnerResult.winner;\n    \n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      winnerLine: winnerLine,\n      winner: winner\n    })\n  }\n  \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.state.winner;\n    \n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return (\n        <li key={move} className={move === this.state.stepNumber ? 'text-bold' : null}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button> <i>{getColAndRow(step.lastStep)}</i>\n        </li>\n      )\n    });\n    \n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (this.state.stepNumber === 9) {\n      status = 'It is a draw!';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    \n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares = {current.squares}\n            onClick = {(i) => this.handleClick(i)}\n            winnerLine = {this.state.winnerLine}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {winner: squares[a], winnerLine: lines[i]};\n    }\n  }\n  return null;\n}\n\nfunction getColAndRow(pos) {\n  if (pos === null)\n    return '';\n    \n  let col, row;\n  switch (Math.floor(pos / 3)) {\n    case 0:\n      row = 1;\n      break;\n      \n    case 1:\n      row = 2;\n      break;\n      \n    case 2:\n      row = 3;\n      break;\n  }\n  switch (pos % 3) {\n    case 0:\n      col = 1;\n      break;\n\n    case 1:\n      col = 2;\n      break;\n\n    case 2:\n      col = 3;\n      break;\n  }\n  \n  return `Row: ${row}, Column: ${col}`;\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}